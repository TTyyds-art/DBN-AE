print('Hello draw digram!')

import matplotlib.pyplot as plt
import numpy as np
# plt.rcParams['text.usetex'] = True
# plt.style.use(['science', 'ieee'])
# # plt.rcParams['text.usetex'] = True
#
# # make data
# np.random.seed(3)
# x = 0.5 + np.arange(8)
# y = np.random.uniform(2, 7, len(x))
#
# # plot
# fig, ax = plt.subplots()
#
# ax.step(x, y, linewidth=2.5)
#
# ax.set(xlim=(0, 8), xticks=np.arange(1, 8),
#        ylim=(0, 8), yticks=np.arange(1, 8))
#
# ax.set_xlabel(r'$\mathbf{Inter}$')
#
# plt.show()

# fig, ax = plt.subplots()
# # interface tracking profiles
# N = 500
# delta = 0.6
# X = np.linspace(-1, 1, N)
# ax.plot(X, (1 - np.tanh(4 * X / delta)) / 2,    # phase field tanh profiles
#         X, (1.4 + np.tanh(4 * X / delta)) / 4, "C2",  # composition profile
#         X, X < 0, "k--")                        # sharp interface
#
# # legend
# ax.legend(("phase field", "level set", "sharp interface"),
#           shadow=True, loc=(0.01, 0.48), handlelength=1.5, fontsize=16)
#
# # the arrow
# ax.annotate("", xy=(-delta / 2., 0.1), xytext=(delta / 2., 0.1),
#             arrowprops=dict(arrowstyle="<->", connectionstyle="arc3"))
# ax.text(0, 0.1, r"$\delta$",
#         color="black", fontsize=24,
#         horizontalalignment="center", verticalalignment="center",
#         bbox=dict(boxstyle="round", fc="white", ec="black", pad=0.2))
#
# # Use tex in labels
# ax.set_xticks([-1, 0, 1])
# ax.set_xticklabels(["$-1$", r"$\pm 0$", "$+1$"], color="k", size=20)
#
# # Left Y-axis labels, combine math mode and text mode
# ax.set_ylabel(r"\bf{phase field} $\phi$", color="C0", fontsize=20)
# ax.set_yticks([0, 0.5, 1])
# ax.set_yticklabels([r"\bf{0}", r"\bf{.5}", r"\bf{1}"], color="k", size=20)
#
# # Right Y-axis labels
# ax.text(1.02, 0.5, r"\bf{level set} $\phi$",
#         color="C2", fontsize=20, rotation=90,
#         horizontalalignment="left", verticalalignment="center",
#         clip_on=False, transform=ax.transAxes)
#
# # Use multiline environment inside a `text`.
# # level set equations
# eq1 = (r"\begin{eqnarray*}"
#        r"|\nabla\phi| &=& 1,\\"
#        r"\frac{\partial \phi}{\partial t} + U|\nabla \phi| &=& 0 "
#        r"\end{eqnarray*}")
# ax.text(1, 0.9, eq1, color="C2", fontsize=18,
#         horizontalalignment="right", verticalalignment="top")
#
# # phase field equations
# eq2 = (r"\begin{eqnarray*}"
#        r"\mathcal{F} &=& \int f\left( \phi, c \right) dV, \\ "
#        r"\frac{ \partial \phi } { \partial t } &=& -M_{ \phi } "
#        r"\frac{ \delta \mathcal{F} } { \delta \phi }"
#        r"\end{eqnarray*}")
# ax.text(0.18, 0.18, eq2, color="C0", fontsize=16)
#
# ax.text(-1, .30, r"gamma: $\gamma$", color="r", fontsize=20)
# ax.text(-1, .18, r"Omega: $\Omega$", color="b", fontsize=20)
#
# plt.show()
import numpy as np
import matplotlib.pyplot as plt

t = np.arange(-1, 2, .01)
s = np.sin(2 * np.pi * t)

fig, ax = plt.subplots()

ax.plot(t, s)
# Thick red horizontal line at y=0 that spans the xrange.
ax.axhline(linewidth=8, color='#d62728')
# Horizontal line at y=1 that spans the xrange.
ax.axhline(y=1)
# Vertical line at x=1 that spans the yrange.
ax.axvline(x=1)
# Thick blue vertical line at x=0 that spans the upper quadrant of the yrange.
ax.axvline(x=0, ymin=0.75, linewidth=8, color='#1f77b4')
# Default hline at y=.5 that spans the middle half of the axes.
ax.axhline(y=.5, xmin=0.25, xmax=0.75)
# Infinite black line going through (0, 0) to (1, 1).
ax.axline((0, 0), (1, 1), color='k')
# 50%-gray rectangle spanning the axes' width from y=0.25 to y=0.75.
ax.axhspan(0.25, 0.75, facecolor='0.5')
# Green rectangle spanning the axes' height from x=1.25 to x=1.55.
ax.axvspan(1.25, 1.55, facecolor='#2ca02c')

plt.show()